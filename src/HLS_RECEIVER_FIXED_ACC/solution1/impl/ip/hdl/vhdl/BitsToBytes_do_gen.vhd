-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BitsToBytes_do_gen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    e_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    e_empty_n : IN STD_LOGIC;
    e_read : OUT STD_LOGIC;
    s_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_full_n : IN STD_LOGIC;
    s_write : OUT STD_LOGIC );
end;


architecture behav of BitsToBytes_do_gen is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal e_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln37_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_blk_n : STD_LOGIC;
    signal q_fu_110_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal v_fu_120_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_assign_reg_81 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal q_0_reg_93 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln40_fu_116_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    q_0_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((s_full_n = ap_const_logic_0) and (icmp_ln37_fu_104_p2 = ap_const_lv1_1)) or ((e_empty_n = ap_const_logic_0) and (icmp_ln37_fu_104_p2 = ap_const_lv1_0)))) and (icmp_ln37_fu_104_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                q_0_reg_93 <= q_fu_110_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                q_0_reg_93 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    v_assign_reg_81_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((s_full_n = ap_const_logic_0) and (icmp_ln37_fu_104_p2 = ap_const_lv1_1)) or ((e_empty_n = ap_const_logic_0) and (icmp_ln37_fu_104_p2 = ap_const_lv1_0)))) and (icmp_ln37_fu_104_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                v_assign_reg_81 <= v_fu_120_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                v_assign_reg_81 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (e_empty_n, s_full_n, ap_CS_fsm, ap_CS_fsm_state3, icmp_ln37_fu_104_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not((((s_full_n = ap_const_logic_0) and (icmp_ln37_fu_104_p2 = ap_const_lv1_1)) or ((e_empty_n = ap_const_logic_0) and (icmp_ln37_fu_104_p2 = ap_const_lv1_0)))) and (icmp_ln37_fu_104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((((s_full_n = ap_const_logic_0) and (icmp_ln37_fu_104_p2 = ap_const_lv1_1)) or ((e_empty_n = ap_const_logic_0) and (icmp_ln37_fu_104_p2 = ap_const_lv1_0)))) and (icmp_ln37_fu_104_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state3_assign_proc : process(e_empty_n, s_full_n, icmp_ln37_fu_104_p2)
    begin
                ap_block_state3 <= (((s_full_n = ap_const_logic_0) and (icmp_ln37_fu_104_p2 = ap_const_lv1_1)) or ((e_empty_n = ap_const_logic_0) and (icmp_ln37_fu_104_p2 = ap_const_lv1_0)));
    end process;


    e_blk_n_assign_proc : process(e_empty_n, ap_CS_fsm_state3, icmp_ln37_fu_104_p2)
    begin
        if (((icmp_ln37_fu_104_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            e_blk_n <= e_empty_n;
        else 
            e_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_read_assign_proc : process(e_empty_n, s_full_n, ap_CS_fsm_state3, icmp_ln37_fu_104_p2)
    begin
        if ((not((((s_full_n = ap_const_logic_0) and (icmp_ln37_fu_104_p2 = ap_const_lv1_1)) or ((e_empty_n = ap_const_logic_0) and (icmp_ln37_fu_104_p2 = ap_const_lv1_0)))) and (icmp_ln37_fu_104_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            e_read <= ap_const_logic_1;
        else 
            e_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln37_fu_104_p2 <= "1" when (q_0_reg_93 = ap_const_lv4_8) else "0";
    q_fu_110_p2 <= std_logic_vector(unsigned(q_0_reg_93) + unsigned(ap_const_lv4_1));

    s_blk_n_assign_proc : process(s_full_n, ap_CS_fsm_state3, icmp_ln37_fu_104_p2)
    begin
        if (((icmp_ln37_fu_104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            s_blk_n <= s_full_n;
        else 
            s_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_din <= v_assign_reg_81;

    s_write_assign_proc : process(e_empty_n, s_full_n, ap_CS_fsm_state3, icmp_ln37_fu_104_p2)
    begin
        if ((not((((s_full_n = ap_const_logic_0) and (icmp_ln37_fu_104_p2 = ap_const_lv1_1)) or ((e_empty_n = ap_const_logic_0) and (icmp_ln37_fu_104_p2 = ap_const_lv1_0)))) and (icmp_ln37_fu_104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            s_write <= ap_const_logic_1;
        else 
            s_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln40_fu_116_p1 <= v_assign_reg_81(7 - 1 downto 0);
    v_fu_120_p3 <= (trunc_ln40_fu_116_p1 & e_dout);
end behav;
