// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ModuleCompute_do_gen (
        ap_clk,
        ap_rst,
        e_dout,
        e_empty_n,
        e_read,
        s_din,
        s_full_n,
        s_write
);

parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input  [7:0] e_dout;
input   e_empty_n;
output   e_read;
output  [7:0] s_din;
input   s_full_n;
output   s_write;

reg e_read;
reg s_write;

reg    e_blk_n;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    s_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln70_fu_130_p2;
reg  signed [7:0] val_V_reg_191;
reg   [7:0] val_V_3_reg_196;
wire  signed [15:0] grp_fu_183_p3;
reg  signed [15:0] add_ln99_reg_201;
wire    ap_CS_fsm_state4;
wire   [3:0] i_fu_136_p2;
reg   [3:0] i_reg_209;
reg    ap_block_state5;
wire   [7:0] res_fu_142_p2;
reg   [7:0] res_reg_214;
wire   [0:0] icmp_ln74_fu_158_p2;
reg   [0:0] icmp_ln74_reg_219;
wire   [7:0] add_1_fu_173_p1;
reg   [7:0] add_1_reg_224;
wire   [7:0] select_ln74_fu_177_p3;
wire    ap_CS_fsm_state6;
reg   [7:0] rc_V_reg_83;
reg   [7:0] add_0_i_reg_96;
reg   [3:0] i_0_i_reg_107;
wire  signed [7:0] ret_V_7_fu_124_p0;
wire  signed [15:0] lhs_V_7_fu_121_p1;
wire  signed [7:0] ret_V_7_fu_124_p1;
wire   [7:0] g2_fu_152_p0;
wire   [15:0] zext_ln73_fu_148_p1;
wire   [7:0] g2_fu_152_p1;
wire   [15:0] g2_fu_152_p2;
wire   [6:0] add_fu_163_p4;
wire  signed [7:0] grp_fu_183_p0;
wire  signed [15:0] lhs_V_fu_118_p1;
wire  signed [7:0] grp_fu_183_p1;
wire   [15:0] grp_fu_183_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd2;
end

ModuleCompute_macg8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
ModuleCompute_macg8j_U51(
    .din0(grp_fu_183_p0),
    .din1(grp_fu_183_p1),
    .din2(grp_fu_183_p2),
    .dout(grp_fu_183_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_0_i_reg_96 <= add_1_reg_224;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        add_0_i_reg_96 <= 8'd128;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i_reg_107 <= i_reg_209;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i_reg_107 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rc_V_reg_83 <= select_ln74_fu_177_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        rc_V_reg_83 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln70_fu_130_p2 == 1'd1) & (s_full_n == 1'b0)) & (icmp_ln70_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_1_reg_224[6 : 0] <= add_1_fu_173_p1[6 : 0];
        icmp_ln74_reg_219 <= icmp_ln74_fu_158_p2;
        res_reg_214 <= res_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln99_reg_201 <= grp_fu_183_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln70_fu_130_p2 == 1'd1) & (s_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_209 <= i_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (e_empty_n == 1'b1))) begin
        val_V_3_reg_196 <= e_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (e_empty_n == 1'b1))) begin
        val_V_reg_191 <= e_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        e_blk_n = e_empty_n;
    end else begin
        e_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (e_empty_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (e_empty_n == 1'b1)))) begin
        e_read = 1'b1;
    end else begin
        e_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln70_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        s_blk_n = s_full_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln70_fu_130_p2 == 1'd1) & (s_full_n == 1'b0)) & (icmp_ln70_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        s_write = 1'b1;
    end else begin
        s_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (e_empty_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (e_empty_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if ((~((icmp_ln70_fu_130_p2 == 1'd1) & (s_full_n == 1'b0)) & (icmp_ln70_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln70_fu_130_p2 == 1'd1) & (s_full_n == 1'b0)) & (icmp_ln70_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_1_fu_173_p1 = add_fu_163_p4;

assign add_fu_163_p4 = {{add_0_i_reg_96[7:1]}};

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state5 = ((icmp_ln70_fu_130_p2 == 1'd1) & (s_full_n == 1'b0));
end

assign g2_fu_152_p0 = zext_ln73_fu_148_p1;

assign g2_fu_152_p1 = zext_ln73_fu_148_p1;

assign g2_fu_152_p2 = (g2_fu_152_p0 * g2_fu_152_p1);

assign grp_fu_183_p0 = lhs_V_fu_118_p1;

assign grp_fu_183_p1 = lhs_V_fu_118_p1;

assign grp_fu_183_p2 = ($signed(ret_V_7_fu_124_p0) * $signed(ret_V_7_fu_124_p1));

assign i_fu_136_p2 = (i_0_i_reg_107 + 4'd1);

assign icmp_ln70_fu_130_p2 = ((i_0_i_reg_107 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_158_p2 = ((g2_fu_152_p2 > add_ln99_reg_201) ? 1'b1 : 1'b0);

assign lhs_V_7_fu_121_p1 = $signed(val_V_3_reg_196);

assign lhs_V_fu_118_p1 = val_V_reg_191;

assign res_fu_142_p2 = (rc_V_reg_83 | add_0_i_reg_96);

assign ret_V_7_fu_124_p0 = lhs_V_7_fu_121_p1;

assign ret_V_7_fu_124_p1 = lhs_V_7_fu_121_p1;

assign s_din = rc_V_reg_83;

assign select_ln74_fu_177_p3 = ((icmp_ln74_reg_219[0:0] === 1'b1) ? rc_V_reg_83 : res_reg_214);

assign zext_ln73_fu_148_p1 = res_fu_142_p2;

always @ (posedge ap_clk) begin
    add_1_reg_224[7] <= 1'b0;
end

endmodule //ModuleCompute_do_gen
