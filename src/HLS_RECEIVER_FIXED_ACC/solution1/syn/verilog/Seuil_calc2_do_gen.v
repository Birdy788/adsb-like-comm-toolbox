// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Seuil_calc2_do_gen (
        ap_clk,
        ap_rst,
        e_dout,
        e_empty_n,
        e_read,
        detect_din,
        detect_full_n,
        detect_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input  [7:0] e_dout;
input   e_empty_n;
output   e_read;
output   detect_din;
input   detect_full_n;
output   detect_write;

reg e_read;
reg detect_write;

reg    e_blk_n;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    detect_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [21:0] p_0108_0_reg_221;
reg   [7:0] val_V_reg_876;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] val_V_reg_876_pp0_iter1_reg;
wire   [16:0] grp_fu_664_p3;
reg   [16:0] ret_V_reg_882;
reg    ap_enable_reg_pp0_iter1;
wire   [10:0] ps_V_fu_437_p2;
reg   [10:0] ps_V_reg_887;
wire   [21:0] sum_V_fu_454_p2;
reg   [21:0] sum_V_reg_892;
reg    ap_enable_reg_pp0_iter2;
wire   [16:0] res_2_V_fu_476_p3;
reg   [16:0] res_2_V_reg_897;
wire   [21:0] ret_V_6_fu_672_p2;
reg   [21:0] ret_V_6_reg_902;
wire   [26:0] mul_ln895_fu_678_p2;
reg   [26:0] mul_ln895_reg_907;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter3;
reg   [21:0] ap_phi_mux_p_0108_0_phi_fu_225_p4;
reg   [7:0] p_0343_0_fu_80;
reg   [7:0] ap_sig_allocacmp_p_0343_0_load;
reg   [7:0] x0_V_fu_84;
reg   [7:0] buffer_1_V_fu_88;
reg   [7:0] buffer_2_V_fu_92;
reg   [7:0] buffer_3_V_fu_96;
reg   [7:0] buffer_4_V_fu_100;
reg   [7:0] buffer_5_V_fu_104;
reg   [7:0] buffer_6_V_fu_108;
reg   [7:0] buffer_7_V_fu_112;
reg   [7:0] buffer_8_V_fu_116;
reg   [7:0] buffer_9_V_fu_120;
reg   [7:0] buffer_10_V_fu_124;
reg   [7:0] buffer_11_V_fu_128;
reg   [7:0] buffer_12_V_fu_132;
reg   [7:0] buffer_13_V_fu_136;
reg   [7:0] buffer_14_V_fu_140;
reg   [7:0] buffer_15_V_fu_144;
reg   [7:0] buffer_16_V_fu_148;
reg   [7:0] buffer_17_V_fu_152;
reg   [7:0] buffer_18_V_fu_156;
reg   [7:0] buffer_19_V_fu_160;
reg   [7:0] buffer_20_V_fu_164;
reg   [7:0] buffer_21_V_fu_168;
reg   [7:0] buffer_22_V_fu_172;
reg   [7:0] buffer_23_V_fu_176;
reg   [7:0] buffer_24_V_fu_180;
reg   [7:0] buffer_25_V_fu_184;
reg   [7:0] buffer_26_V_fu_188;
reg   [7:0] buffer_27_V_fu_192;
reg   [7:0] buffer_28_V_fu_196;
reg   [7:0] buffer_29_V_fu_200;
reg   [7:0] buffer_30_V_fu_204;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] ret_V_5_fu_242_p0;
wire   [15:0] lhs_V_5_fu_239_p1;
wire   [7:0] ret_V_5_fu_242_p1;
wire   [15:0] ret_V_5_fu_242_p2;
wire   [8:0] zext_ln215_fu_345_p1;
wire   [8:0] zext_ln215_1_fu_349_p1;
wire   [8:0] add_ln215_fu_377_p2;
wire   [8:0] zext_ln215_3_fu_357_p1;
wire   [8:0] zext_ln215_2_fu_353_p1;
wire   [8:0] add_ln215_1_fu_387_p2;
wire   [9:0] zext_ln215_8_fu_383_p1;
wire   [9:0] zext_ln215_9_fu_393_p1;
wire   [9:0] add_ln215_2_fu_397_p2;
wire   [8:0] zext_ln215_5_fu_365_p1;
wire   [8:0] zext_ln215_4_fu_361_p1;
wire   [8:0] add_ln215_3_fu_407_p2;
wire   [8:0] zext_ln215_7_fu_373_p1;
wire   [8:0] zext_ln215_6_fu_369_p1;
wire   [8:0] add_ln215_4_fu_417_p2;
wire   [9:0] zext_ln215_11_fu_413_p1;
wire   [9:0] zext_ln215_12_fu_423_p1;
wire   [9:0] add_ln215_5_fu_427_p2;
wire   [10:0] zext_ln215_10_fu_403_p1;
wire   [10:0] zext_ln215_13_fu_433_p1;
wire   [19:0] shl_ln_fu_443_p3;
wire  signed [21:0] sext_ln700_fu_450_p1;
wire   [16:0] trunc_ln_fu_460_p4;
wire   [0:0] icmp_ln879_fu_470_p2;
wire   [26:0] zext_ln895_1_fu_649_p1;
wire   [0:0] icmp_ln895_fu_652_p2;
wire   [7:0] grp_fu_664_p0;
wire   [15:0] lhs_V_4_fu_235_p1;
wire   [7:0] grp_fu_664_p1;
wire   [15:0] grp_fu_664_p2;
wire   [10:0] ret_V_6_fu_672_p0;
wire   [21:0] lhs_V_6_fu_643_p1;
wire   [10:0] ret_V_6_fu_672_p1;
wire   [16:0] mul_ln895_fu_678_p0;
wire   [5:0] mul_ln895_fu_678_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [16:0] grp_fu_664_p20;
wire   [26:0] mul_ln895_fu_678_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Seuil_calc2_mac_mdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
Seuil_calc2_mac_mdEe_U22(
    .din0(grp_fu_664_p0),
    .din1(grp_fu_664_p1),
    .din2(grp_fu_664_p2),
    .dout(grp_fu_664_p3)
);

Seuil_calc2_mul_meOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 22 ))
Seuil_calc2_mul_meOg_U23(
    .din0(ret_V_6_fu_672_p0),
    .din1(ret_V_6_fu_672_p1),
    .dout(ret_V_6_fu_672_p2)
);

Seuil_calc2_mul_mfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 27 ))
Seuil_calc2_mul_mfYi_U24(
    .din0(mul_ln895_fu_678_p0),
    .din1(mul_ln895_fu_678_p1),
    .dout(mul_ln895_fu_678_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_0108_0_reg_221 <= sum_V_reg_892;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        p_0108_0_reg_221 <= 22'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buffer_10_V_fu_124 <= buffer_11_V_fu_128;
        buffer_11_V_fu_128 <= buffer_12_V_fu_132;
        buffer_12_V_fu_132 <= buffer_13_V_fu_136;
        buffer_13_V_fu_136 <= buffer_14_V_fu_140;
        buffer_14_V_fu_140 <= buffer_15_V_fu_144;
        buffer_15_V_fu_144 <= buffer_16_V_fu_148;
        buffer_16_V_fu_148 <= buffer_17_V_fu_152;
        buffer_17_V_fu_152 <= buffer_18_V_fu_156;
        buffer_18_V_fu_156 <= buffer_19_V_fu_160;
        buffer_19_V_fu_160 <= buffer_20_V_fu_164;
        buffer_1_V_fu_88 <= buffer_2_V_fu_92;
        buffer_20_V_fu_164 <= buffer_21_V_fu_168;
        buffer_21_V_fu_168 <= buffer_22_V_fu_172;
        buffer_22_V_fu_172 <= buffer_23_V_fu_176;
        buffer_23_V_fu_176 <= buffer_24_V_fu_180;
        buffer_24_V_fu_180 <= buffer_25_V_fu_184;
        buffer_25_V_fu_184 <= buffer_26_V_fu_188;
        buffer_26_V_fu_188 <= buffer_27_V_fu_192;
        buffer_27_V_fu_192 <= buffer_28_V_fu_196;
        buffer_28_V_fu_196 <= buffer_29_V_fu_200;
        buffer_29_V_fu_200 <= buffer_30_V_fu_204;
        buffer_2_V_fu_92 <= buffer_3_V_fu_96;
        buffer_30_V_fu_204 <= val_V_reg_876_pp0_iter1_reg;
        buffer_3_V_fu_96 <= buffer_4_V_fu_100;
        buffer_4_V_fu_100 <= buffer_5_V_fu_104;
        buffer_5_V_fu_104 <= buffer_6_V_fu_108;
        buffer_6_V_fu_108 <= buffer_7_V_fu_112;
        buffer_7_V_fu_112 <= buffer_8_V_fu_116;
        buffer_8_V_fu_116 <= buffer_9_V_fu_120;
        buffer_9_V_fu_120 <= buffer_10_V_fu_124;
        p_0343_0_fu_80 <= x0_V_fu_84;
        sum_V_reg_892 <= sum_V_fu_454_p2;
        x0_V_fu_84 <= buffer_1_V_fu_88;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        mul_ln895_reg_907 <= mul_ln895_fu_678_p2;
        ps_V_reg_887 <= ps_V_fu_437_p2;
        res_2_V_reg_897 <= res_2_V_fu_476_p3;
        ret_V_6_reg_902 <= ret_V_6_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ret_V_reg_882 <= grp_fu_664_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        val_V_reg_876 <= e_dout;
        val_V_reg_876_pp0_iter1_reg <= val_V_reg_876;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_p_0108_0_phi_fu_225_p4 = sum_V_reg_892;
    end else begin
        ap_phi_mux_p_0108_0_phi_fu_225_p4 = p_0108_0_reg_221;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_0343_0_load = x0_V_fu_84;
    end else begin
        ap_sig_allocacmp_p_0343_0_load = p_0343_0_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        detect_blk_n = detect_full_n;
    end else begin
        detect_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        detect_write = 1'b1;
    end else begin
        detect_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_blk_n = e_empty_n;
    end else begin
        e_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_read = 1'b1;
    end else begin
        e_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln215_1_fu_387_p2 = (zext_ln215_3_fu_357_p1 + zext_ln215_2_fu_353_p1);

assign add_ln215_2_fu_397_p2 = (zext_ln215_8_fu_383_p1 + zext_ln215_9_fu_393_p1);

assign add_ln215_3_fu_407_p2 = (zext_ln215_5_fu_365_p1 + zext_ln215_4_fu_361_p1);

assign add_ln215_4_fu_417_p2 = (zext_ln215_7_fu_373_p1 + zext_ln215_6_fu_369_p1);

assign add_ln215_5_fu_427_p2 = (zext_ln215_11_fu_413_p1 + zext_ln215_12_fu_423_p1);

assign add_ln215_fu_377_p2 = (zext_ln215_fu_345_p1 + zext_ln215_1_fu_349_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((detect_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((e_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((detect_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((e_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((detect_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((e_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (e_empty_n == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = (detect_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign detect_din = (icmp_ln895_fu_652_p2 ^ 1'd1);

assign grp_fu_664_p0 = lhs_V_4_fu_235_p1;

assign grp_fu_664_p1 = lhs_V_4_fu_235_p1;

assign grp_fu_664_p2 = grp_fu_664_p20;

assign grp_fu_664_p20 = ret_V_5_fu_242_p2;

assign icmp_ln879_fu_470_p2 = ((trunc_ln_fu_460_p4 == 17'd0) ? 1'b1 : 1'b0);

assign icmp_ln895_fu_652_p2 = ((zext_ln895_1_fu_649_p1 < mul_ln895_reg_907) ? 1'b1 : 1'b0);

assign lhs_V_4_fu_235_p1 = ap_sig_allocacmp_p_0343_0_load;

assign lhs_V_5_fu_239_p1 = val_V_reg_876;

assign lhs_V_6_fu_643_p1 = ps_V_reg_887;

assign mul_ln895_fu_678_p0 = mul_ln895_fu_678_p00;

assign mul_ln895_fu_678_p00 = res_2_V_reg_897;

assign mul_ln895_fu_678_p1 = 27'd27;

assign ps_V_fu_437_p2 = (zext_ln215_10_fu_403_p1 + zext_ln215_13_fu_433_p1);

assign res_2_V_fu_476_p3 = ((icmp_ln879_fu_470_p2[0:0] === 1'b1) ? 17'd31 : trunc_ln_fu_460_p4);

assign ret_V_5_fu_242_p0 = lhs_V_5_fu_239_p1;

assign ret_V_5_fu_242_p1 = lhs_V_5_fu_239_p1;

assign ret_V_5_fu_242_p2 = (ret_V_5_fu_242_p0 * ret_V_5_fu_242_p1);

assign ret_V_6_fu_672_p0 = lhs_V_6_fu_643_p1;

assign ret_V_6_fu_672_p1 = lhs_V_6_fu_643_p1;

assign sext_ln700_fu_450_p1 = $signed(shl_ln_fu_443_p3);

assign shl_ln_fu_443_p3 = {{ret_V_reg_882}, {3'd0}};

assign sum_V_fu_454_p2 = ($signed(ap_phi_mux_p_0108_0_phi_fu_225_p4) + $signed(sext_ln700_fu_450_p1));

assign trunc_ln_fu_460_p4 = {{sum_V_fu_454_p2[21:5]}};

assign zext_ln215_10_fu_403_p1 = add_ln215_2_fu_397_p2;

assign zext_ln215_11_fu_413_p1 = add_ln215_3_fu_407_p2;

assign zext_ln215_12_fu_423_p1 = add_ln215_4_fu_417_p2;

assign zext_ln215_13_fu_433_p1 = add_ln215_5_fu_427_p2;

assign zext_ln215_1_fu_349_p1 = buffer_1_V_fu_88;

assign zext_ln215_2_fu_353_p1 = buffer_4_V_fu_100;

assign zext_ln215_3_fu_357_p1 = buffer_5_V_fu_104;

assign zext_ln215_4_fu_361_p1 = buffer_14_V_fu_140;

assign zext_ln215_5_fu_365_p1 = buffer_15_V_fu_144;

assign zext_ln215_6_fu_369_p1 = buffer_18_V_fu_156;

assign zext_ln215_7_fu_373_p1 = buffer_19_V_fu_160;

assign zext_ln215_8_fu_383_p1 = add_ln215_fu_377_p2;

assign zext_ln215_9_fu_393_p1 = add_ln215_1_fu_387_p2;

assign zext_ln215_fu_345_p1 = x0_V_fu_84;

assign zext_ln895_1_fu_649_p1 = ret_V_6_reg_902;

endmodule //Seuil_calc2_do_gen
