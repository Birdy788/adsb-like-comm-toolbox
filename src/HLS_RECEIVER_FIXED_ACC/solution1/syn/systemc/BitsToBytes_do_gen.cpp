// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "BitsToBytes_do_gen.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic BitsToBytes_do_gen::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic BitsToBytes_do_gen::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> BitsToBytes_do_gen::ap_ST_fsm_state2 = "10";
const sc_lv<3> BitsToBytes_do_gen::ap_ST_fsm_state3 = "100";
const sc_lv<32> BitsToBytes_do_gen::ap_const_lv32_2 = "10";
const sc_lv<1> BitsToBytes_do_gen::ap_const_lv1_0 = "0";
const sc_lv<1> BitsToBytes_do_gen::ap_const_lv1_1 = "1";
const sc_lv<8> BitsToBytes_do_gen::ap_const_lv8_0 = "00000000";
const sc_lv<32> BitsToBytes_do_gen::ap_const_lv32_1 = "1";
const sc_lv<4> BitsToBytes_do_gen::ap_const_lv4_0 = "0000";
const sc_lv<4> BitsToBytes_do_gen::ap_const_lv4_8 = "1000";
const sc_lv<4> BitsToBytes_do_gen::ap_const_lv4_1 = "1";
const bool BitsToBytes_do_gen::ap_const_boolean_1 = true;

BitsToBytes_do_gen::BitsToBytes_do_gen(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( e_empty_n );
    sensitive << ( s_full_n );
    sensitive << ( icmp_ln37_fu_104_p2 );

    SC_METHOD(thread_e_blk_n);
    sensitive << ( e_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln37_fu_104_p2 );

    SC_METHOD(thread_e_read);
    sensitive << ( e_empty_n );
    sensitive << ( s_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln37_fu_104_p2 );

    SC_METHOD(thread_icmp_ln37_fu_104_p2);
    sensitive << ( e_empty_n );
    sensitive << ( s_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln37_fu_104_p2 );
    sensitive << ( q_0_reg_93 );

    SC_METHOD(thread_q_fu_110_p2);
    sensitive << ( q_0_reg_93 );

    SC_METHOD(thread_s_blk_n);
    sensitive << ( s_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln37_fu_104_p2 );

    SC_METHOD(thread_s_din);
    sensitive << ( e_empty_n );
    sensitive << ( s_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln37_fu_104_p2 );
    sensitive << ( v_assign_reg_81 );

    SC_METHOD(thread_s_write);
    sensitive << ( e_empty_n );
    sensitive << ( s_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln37_fu_104_p2 );

    SC_METHOD(thread_trunc_ln40_fu_116_p1);
    sensitive << ( v_assign_reg_81 );

    SC_METHOD(thread_v_fu_120_p3);
    sensitive << ( e_dout );
    sensitive << ( trunc_ln40_fu_116_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( e_empty_n );
    sensitive << ( s_full_n );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln37_fu_104_p2 );

    ap_CS_fsm = "010";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "BitsToBytes_do_gen_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, e_dout, "(port)e_dout");
    sc_trace(mVcdFile, e_empty_n, "(port)e_empty_n");
    sc_trace(mVcdFile, e_read, "(port)e_read");
    sc_trace(mVcdFile, s_din, "(port)s_din");
    sc_trace(mVcdFile, s_full_n, "(port)s_full_n");
    sc_trace(mVcdFile, s_write, "(port)s_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, e_blk_n, "e_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln37_fu_104_p2, "icmp_ln37_fu_104_p2");
    sc_trace(mVcdFile, s_blk_n, "s_blk_n");
    sc_trace(mVcdFile, q_fu_110_p2, "q_fu_110_p2");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, v_fu_120_p3, "v_fu_120_p3");
    sc_trace(mVcdFile, v_assign_reg_81, "v_assign_reg_81");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, q_0_reg_93, "q_0_reg_93");
    sc_trace(mVcdFile, trunc_ln40_fu_116_p1, "trunc_ln40_fu_116_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

BitsToBytes_do_gen::~BitsToBytes_do_gen() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void BitsToBytes_do_gen::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state2;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, e_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, s_full_n.read()))))) {
        q_0_reg_93 = q_fu_110_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        q_0_reg_93 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, e_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, s_full_n.read()))))) {
        v_assign_reg_81 = v_fu_120_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        v_assign_reg_81 = ap_const_lv8_0;
    }
}

void BitsToBytes_do_gen::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void BitsToBytes_do_gen::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void BitsToBytes_do_gen::thread_ap_block_state3() {
    ap_block_state3 = ((esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, e_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, s_full_n.read())));
}

void BitsToBytes_do_gen::thread_e_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_0))) {
        e_blk_n = e_empty_n.read();
    } else {
        e_blk_n = ap_const_logic_1;
    }
}

void BitsToBytes_do_gen::thread_e_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, e_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, s_full_n.read()))))) {
        e_read = ap_const_logic_1;
    } else {
        e_read = ap_const_logic_0;
    }
}

void BitsToBytes_do_gen::thread_icmp_ln37_fu_104_p2() {
    icmp_ln37_fu_104_p2 = (!q_0_reg_93.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(q_0_reg_93.read() == ap_const_lv4_8);
}

void BitsToBytes_do_gen::thread_q_fu_110_p2() {
    q_fu_110_p2 = (!q_0_reg_93.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(q_0_reg_93.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void BitsToBytes_do_gen::thread_s_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_1))) {
        s_blk_n = s_full_n.read();
    } else {
        s_blk_n = ap_const_logic_1;
    }
}

void BitsToBytes_do_gen::thread_s_din() {
    s_din = v_assign_reg_81.read();
}

void BitsToBytes_do_gen::thread_s_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_1) && 
         !((esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, e_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, s_full_n.read()))))) {
        s_write = ap_const_logic_1;
    } else {
        s_write = ap_const_logic_0;
    }
}

void BitsToBytes_do_gen::thread_trunc_ln40_fu_116_p1() {
    trunc_ln40_fu_116_p1 = v_assign_reg_81.read().range(7-1, 0);
}

void BitsToBytes_do_gen::thread_v_fu_120_p3() {
    v_fu_120_p3 = esl_concat<7,1>(trunc_ln40_fu_116_p1.read(), e_dout.read());
}

void BitsToBytes_do_gen::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_1) && !((esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, e_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, s_full_n.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_0) && !((esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, e_empty_n.read())) || (esl_seteq<1,1,1>(icmp_ln37_fu_104_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, s_full_n.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

