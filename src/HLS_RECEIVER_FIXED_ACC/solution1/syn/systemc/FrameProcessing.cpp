// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "FrameProcessing.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic FrameProcessing::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic FrameProcessing::ap_const_logic_0 = sc_dt::Log_0;
const bool FrameProcessing::ap_const_boolean_1 = true;

FrameProcessing::FrameProcessing(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_FrameProcessing_do_gen_fu_64 = new FrameProcessing_do_gen("grp_FrameProcessing_do_gen_fu_64");
    grp_FrameProcessing_do_gen_fu_64->ap_clk(clock);
    grp_FrameProcessing_do_gen_fu_64->ap_rst(reset);
    grp_FrameProcessing_do_gen_fu_64->e_dout(e_dout);
    grp_FrameProcessing_do_gen_fu_64->e_empty_n(e_empty_n);
    grp_FrameProcessing_do_gen_fu_64->e_read(grp_FrameProcessing_do_gen_fu_64_e_read);
    grp_FrameProcessing_do_gen_fu_64->addr_din(grp_FrameProcessing_do_gen_fu_64_addr_din);
    grp_FrameProcessing_do_gen_fu_64->addr_full_n(addr_full_n);
    grp_FrameProcessing_do_gen_fu_64->addr_write(grp_FrameProcessing_do_gen_fu_64_addr_write);
    grp_FrameProcessing_do_gen_fu_64->rgbv_din(grp_FrameProcessing_do_gen_fu_64_rgbv_din);
    grp_FrameProcessing_do_gen_fu_64->rgbv_full_n(rgbv_full_n);
    grp_FrameProcessing_do_gen_fu_64->rgbv_write(grp_FrameProcessing_do_gen_fu_64_rgbv_write);

    SC_METHOD(thread_addr_din);
    sensitive << ( grp_FrameProcessing_do_gen_fu_64_addr_din );
    sensitive << ( grp_FrameProcessing_do_gen_fu_64_addr_write );

    SC_METHOD(thread_addr_write);
    sensitive << ( grp_FrameProcessing_do_gen_fu_64_addr_write );

    SC_METHOD(thread_e_read);
    sensitive << ( grp_FrameProcessing_do_gen_fu_64_e_read );

    SC_METHOD(thread_rgbv_din);
    sensitive << ( grp_FrameProcessing_do_gen_fu_64_rgbv_din );
    sensitive << ( grp_FrameProcessing_do_gen_fu_64_rgbv_write );

    SC_METHOD(thread_rgbv_write);
    sensitive << ( grp_FrameProcessing_do_gen_fu_64_rgbv_write );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "FrameProcessing_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, clock, "(port)clock");
    sc_trace(mVcdFile, reset, "(port)reset");
    sc_trace(mVcdFile, e_dout, "(port)e_dout");
    sc_trace(mVcdFile, e_empty_n, "(port)e_empty_n");
    sc_trace(mVcdFile, e_read, "(port)e_read");
    sc_trace(mVcdFile, addr_din, "(port)addr_din");
    sc_trace(mVcdFile, addr_full_n, "(port)addr_full_n");
    sc_trace(mVcdFile, addr_write, "(port)addr_write");
    sc_trace(mVcdFile, rgbv_din, "(port)rgbv_din");
    sc_trace(mVcdFile, rgbv_full_n, "(port)rgbv_full_n");
    sc_trace(mVcdFile, rgbv_write, "(port)rgbv_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, grp_FrameProcessing_do_gen_fu_64_e_read, "grp_FrameProcessing_do_gen_fu_64_e_read");
    sc_trace(mVcdFile, grp_FrameProcessing_do_gen_fu_64_addr_din, "grp_FrameProcessing_do_gen_fu_64_addr_din");
    sc_trace(mVcdFile, grp_FrameProcessing_do_gen_fu_64_addr_write, "grp_FrameProcessing_do_gen_fu_64_addr_write");
    sc_trace(mVcdFile, grp_FrameProcessing_do_gen_fu_64_rgbv_din, "grp_FrameProcessing_do_gen_fu_64_rgbv_din");
    sc_trace(mVcdFile, grp_FrameProcessing_do_gen_fu_64_rgbv_write, "grp_FrameProcessing_do_gen_fu_64_rgbv_write");
#endif

    }
}

FrameProcessing::~FrameProcessing() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_FrameProcessing_do_gen_fu_64;
}

void FrameProcessing::thread_addr_din() {
    addr_din = grp_FrameProcessing_do_gen_fu_64_addr_din.read();
}

void FrameProcessing::thread_addr_write() {
    addr_write = grp_FrameProcessing_do_gen_fu_64_addr_write.read();
}

void FrameProcessing::thread_e_read() {
    e_read = grp_FrameProcessing_do_gen_fu_64_e_read.read();
}

void FrameProcessing::thread_rgbv_din() {
    rgbv_din = grp_FrameProcessing_do_gen_fu_64_rgbv_din.read();
}

void FrameProcessing::thread_rgbv_write() {
    rgbv_write = grp_FrameProcessing_do_gen_fu_64_rgbv_write.read();
}

}

