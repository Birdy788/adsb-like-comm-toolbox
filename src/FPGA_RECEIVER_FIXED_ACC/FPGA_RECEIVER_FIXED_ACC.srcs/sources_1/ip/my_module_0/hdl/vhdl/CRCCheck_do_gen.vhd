-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CRCCheck_do_gen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    e_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    e_empty_n : IN STD_LOGIC;
    e_read : OUT STD_LOGIC;
    s_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_full_n : IN STD_LOGIC;
    s_write : OUT STD_LOGIC );
end;


architecture behav of CRCCheck_do_gen is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv7_44 : STD_LOGIC_VECTOR (6 downto 0) := "1000100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_82F63B78 : STD_LOGIC_VECTOR (31 downto 0) := "10000010111101100011101101111000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal e_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln41_reg_658 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln54_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln68_reg_711 : STD_LOGIC_VECTOR (0 downto 0);
    signal R_0_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_168 : STD_LOGIC_VECTOR (6 downto 0);
    signal i3_0_reg_213 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln41_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln41_reg_658_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_230_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_5_reg_662 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln49_2_fu_349_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_2_reg_667 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln49_3_reg_672 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln49_7_fu_507_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal i_fu_521_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state7 : BOOLEAN;
    signal icmp_ln58_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_6_fu_557_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal crc_fu_603_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln63_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_7_fu_623_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state9 : STD_LOGIC;
    signal ibuffer_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ibuffer_V_ce0 : STD_LOGIC;
    signal ibuffer_V_we0 : STD_LOGIC;
    signal ibuffer_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_R_0_phi_fu_160_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_0_phi_fu_172_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal i1_0_reg_180 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal crc_0_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_0_reg_202 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln45_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal crc_t_3_fu_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln55_fu_527_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal crc_t_3_1_fu_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal crc_t_3_2_fu_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal crc_t_3_3_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal zext_ln46_fu_241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln46_1_fu_249_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln46_fu_245_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal R_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_265_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln49_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln46_1_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln49_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_fu_285_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln49_1_fu_297_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln49_1_fu_307_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln49_fu_293_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln49_1_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_1_fu_317_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln49_2_fu_329_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln49_2_fu_339_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln49_1_fu_325_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln49_2_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln49_3_fu_370_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln49_2_fu_367_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln49_3_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_3_fu_379_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln49_4_fu_391_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln49_4_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln49_3_fu_387_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln49_4_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_4_fu_411_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln49_5_fu_423_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln49_5_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln49_4_fu_419_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln49_5_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_5_fu_443_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln49_6_fu_455_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln49_6_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln49_5_fu_451_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln49_6_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln49_6_fu_475_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln49_7_fu_487_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln49_7_fu_497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln49_6_fu_483_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln49_7_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln59_fu_575_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_fu_585_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln59_1_fu_599_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_585_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component CRCCheck_mux_42_8cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component CRCCheck_do_gen_ibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ibuffer_V_U : component CRCCheck_do_gen_ibkb
    generic map (
        DataWidth => 8,
        AddressRange => 68,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ibuffer_V_address0,
        ce0 => ibuffer_V_ce0,
        we0 => ibuffer_V_we0,
        d0 => e_dout,
        q0 => ibuffer_V_q0);

    CRCCheck_mux_42_8cud_U9 : component CRCCheck_mux_42_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => crc_t_3_fu_102,
        din1 => crc_t_3_1_fu_106,
        din2 => crc_t_3_2_fu_110,
        din3 => crc_t_3_3_fu_114,
        din4 => tmp_11_fu_585_p5,
        dout => tmp_11_fu_585_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln63_fu_611_p2 = ap_const_lv1_1) and (icmp_ln58_fu_551_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state9) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state9);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln63_fu_611_p2 = ap_const_lv1_1) and (icmp_ln58_fu_551_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    R_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln41_reg_658_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                R_0_reg_156 <= select_ln49_7_fu_507_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                R_0_reg_156 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    crc_0_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (e_empty_n = ap_const_logic_0))) and (icmp_ln54_fu_515_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                crc_0_reg_191 <= ap_const_lv32_0;
            elsif (((icmp_ln58_fu_551_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                crc_0_reg_191 <= crc_fu_603_p3;
            end if; 
        end if;
    end process;

    i1_0_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i1_0_reg_180 <= ap_const_lv3_0;
            elsif ((not(((icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (e_empty_n = ap_const_logic_0))) and (icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i1_0_reg_180 <= i_fu_521_p2;
            end if; 
        end if;
    end process;

    i2_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (e_empty_n = ap_const_logic_0))) and (icmp_ln54_fu_515_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i2_0_reg_202 <= ap_const_lv3_0;
            elsif (((icmp_ln58_fu_551_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i2_0_reg_202 <= i_6_fu_557_p2;
            end if; 
        end if;
    end process;

    i3_0_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln63_fu_611_p2 = ap_const_lv1_1) and (icmp_ln58_fu_551_p2 = ap_const_lv1_1))) then 
                i3_0_reg_213 <= ap_const_lv7_0;
            elsif (((icmp_ln68_fu_617_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i3_0_reg_213 <= i_7_fu_623_p2;
            end if; 
        end if;
    end process;

    i_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln41_reg_658 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_168 <= i_5_reg_662;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_0_reg_168 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (e_empty_n = ap_const_logic_0))) and (icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (trunc_ln55_fu_527_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                crc_t_3_1_fu_106 <= e_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (e_empty_n = ap_const_logic_0))) and (icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (trunc_ln55_fu_527_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                crc_t_3_2_fu_110 <= e_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (e_empty_n = ap_const_logic_0))) and (icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (trunc_ln55_fu_527_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                crc_t_3_3_fu_114 <= e_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (e_empty_n = ap_const_logic_0))) and (icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (trunc_ln55_fu_527_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                crc_t_3_fu_102 <= e_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_5_reg_662 <= i_5_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln41_reg_658 <= icmp_ln41_fu_224_p2;
                icmp_ln41_reg_658_pp0_iter1_reg <= icmp_ln41_reg_658;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln68_reg_711 <= icmp_ln68_fu_617_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln41_reg_658 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln49_3_reg_672 <= select_ln49_2_fu_349_p3(31 downto 1);
                select_ln49_2_reg_667 <= select_ln49_2_fu_349_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (e_empty_n, ap_CS_fsm, ap_enable_reg_pp0_iter1, ap_CS_fsm_state7, icmp_ln54_fu_515_p2, icmp_ln41_fu_224_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, icmp_ln58_fu_551_p2, ap_CS_fsm_state8, icmp_ln63_fu_611_p2, icmp_ln68_fu_617_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln41_fu_224_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln41_fu_224_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if ((not(((icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (e_empty_n = ap_const_logic_0))) and (icmp_ln54_fu_515_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif ((not(((icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (e_empty_n = ap_const_logic_0))) and (icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln63_fu_611_p2 = ap_const_lv1_1) and (icmp_ln58_fu_551_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln63_fu_611_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln58_fu_551_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln68_fu_617_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln68_fu_617_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    R_fu_253_p2 <= (zext_ln46_fu_241_p1 xor ap_phi_mux_R_0_phi_fu_160_p4);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(e_empty_n, ap_enable_reg_pp0_iter1, icmp_ln41_reg_658)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln41_reg_658 = ap_const_lv1_0) and (e_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(e_empty_n, ap_enable_reg_pp0_iter1, icmp_ln41_reg_658)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln41_reg_658 = ap_const_lv1_0) and (e_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(s_full_n, ap_enable_reg_pp1_iter1, icmp_ln68_reg_711)
    begin
                ap_block_pp1_stage0_01001 <= ((icmp_ln68_reg_711 = ap_const_lv1_0) and (s_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(s_full_n, ap_enable_reg_pp1_iter1, icmp_ln68_reg_711)
    begin
                ap_block_pp1_stage0_11001 <= ((icmp_ln68_reg_711 = ap_const_lv1_0) and (s_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(s_full_n, ap_enable_reg_pp1_iter1, icmp_ln68_reg_711)
    begin
                ap_block_pp1_stage0_subdone <= ((icmp_ln68_reg_711 = ap_const_lv1_0) and (s_full_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_state10_pp1_stage0_iter1_assign_proc : process(s_full_n, icmp_ln68_reg_711)
    begin
                ap_block_state10_pp1_stage0_iter1 <= ((icmp_ln68_reg_711 = ap_const_lv1_0) and (s_full_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(e_empty_n, icmp_ln41_reg_658)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln41_reg_658 = ap_const_lv1_0) and (e_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_assign_proc : process(e_empty_n, icmp_ln54_fu_515_p2)
    begin
                ap_block_state7 <= ((icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (e_empty_n = ap_const_logic_0));
    end process;

        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln41_fu_224_p2)
    begin
        if ((icmp_ln41_fu_224_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state9_assign_proc : process(icmp_ln68_fu_617_p2)
    begin
        if ((icmp_ln68_fu_617_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_R_0_phi_fu_160_p4_assign_proc : process(ap_block_pp0_stage0, R_0_reg_156, icmp_ln41_reg_658_pp0_iter1_reg, select_ln49_7_fu_507_p3, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln41_reg_658_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_R_0_phi_fu_160_p4 <= select_ln49_7_fu_507_p3;
        else 
            ap_phi_mux_R_0_phi_fu_160_p4 <= R_0_reg_156;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_172_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln41_reg_658, i_0_reg_168, i_5_reg_662)
    begin
        if (((icmp_ln41_reg_658 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_172_p4 <= i_5_reg_662;
        else 
            ap_phi_mux_i_0_phi_fu_172_p4 <= i_0_reg_168;
        end if; 
    end process;

    crc_fu_603_p3 <= (trunc_ln59_1_fu_599_p1 & tmp_11_fu_585_p6);

    e_blk_n_assign_proc : process(e_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln41_reg_658, ap_CS_fsm_state7, icmp_ln54_fu_515_p2)
    begin
        if ((((icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln41_reg_658 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            e_blk_n <= e_empty_n;
        else 
            e_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_read_assign_proc : process(e_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln41_reg_658, ap_CS_fsm_state7, icmp_ln54_fu_515_p2, ap_block_pp0_stage0_11001)
    begin
        if (((not(((icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (e_empty_n = ap_const_logic_0))) and (icmp_ln54_fu_515_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln41_reg_658 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            e_read <= ap_const_logic_1;
        else 
            e_read <= ap_const_logic_0;
        end if; 
    end process;

    i_5_fu_230_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_172_p4) + unsigned(ap_const_lv7_1));
    i_6_fu_557_p2 <= std_logic_vector(unsigned(i2_0_reg_202) + unsigned(ap_const_lv3_1));
    i_7_fu_623_p2 <= std_logic_vector(unsigned(i3_0_reg_213) + unsigned(ap_const_lv7_1));
    i_fu_521_p2 <= std_logic_vector(unsigned(i1_0_reg_180) + unsigned(ap_const_lv3_1));

    ibuffer_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln45_fu_236_p1, zext_ln70_fu_629_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            ibuffer_V_address0 <= zext_ln70_fu_629_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ibuffer_V_address0 <= zext_ln45_fu_236_p1(7 - 1 downto 0);
        else 
            ibuffer_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    ibuffer_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ibuffer_V_ce0 <= ap_const_logic_1;
        else 
            ibuffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ibuffer_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln41_reg_658, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln41_reg_658 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ibuffer_V_we0 <= ap_const_logic_1;
        else 
            ibuffer_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln41_fu_224_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_172_p4 = ap_const_lv7_44) else "0";
    icmp_ln54_fu_515_p2 <= "1" when (i1_0_reg_180 = ap_const_lv3_4) else "0";
    icmp_ln58_fu_551_p2 <= "1" when (i2_0_reg_202 = ap_const_lv3_4) else "0";
    icmp_ln63_fu_611_p2 <= "1" when (crc_0_reg_191 = R_0_reg_156) else "0";
    icmp_ln68_fu_617_p2 <= "1" when (i3_0_reg_213 = ap_const_lv7_44) else "0";
    lshr_ln49_1_fu_297_p4 <= select_ln49_fu_285_p3(31 downto 1);
    lshr_ln49_2_fu_329_p4 <= select_ln49_1_fu_317_p3(31 downto 1);
    lshr_ln49_4_fu_391_p4 <= select_ln49_3_fu_379_p3(31 downto 1);
    lshr_ln49_5_fu_423_p4 <= select_ln49_4_fu_411_p3(31 downto 1);
    lshr_ln49_6_fu_455_p4 <= select_ln49_5_fu_443_p3(31 downto 1);
    lshr_ln49_7_fu_487_p4 <= select_ln49_6_fu_475_p3(31 downto 1);
    lshr_ln_fu_265_p4 <= R_fu_253_p2(31 downto 1);

    s_blk_n_assign_proc : process(s_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln68_reg_711)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln68_reg_711 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            s_blk_n <= s_full_n;
        else 
            s_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_din <= ibuffer_V_q0;

    s_write_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln68_reg_711, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln68_reg_711 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            s_write <= ap_const_logic_1;
        else 
            s_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln49_1_fu_317_p3 <= 
        xor_ln49_1_fu_311_p2 when (trunc_ln49_fu_293_p1(0) = '1') else 
        zext_ln49_1_fu_307_p1;
    select_ln49_2_fu_349_p3 <= 
        xor_ln49_2_fu_343_p2 when (trunc_ln49_1_fu_325_p1(0) = '1') else 
        zext_ln49_2_fu_339_p1;
    select_ln49_3_fu_379_p3 <= 
        xor_ln49_3_fu_373_p2 when (trunc_ln49_2_fu_367_p1(0) = '1') else 
        zext_ln49_3_fu_370_p1;
    select_ln49_4_fu_411_p3 <= 
        xor_ln49_4_fu_405_p2 when (trunc_ln49_3_fu_387_p1(0) = '1') else 
        zext_ln49_4_fu_401_p1;
    select_ln49_5_fu_443_p3 <= 
        xor_ln49_5_fu_437_p2 when (trunc_ln49_4_fu_419_p1(0) = '1') else 
        zext_ln49_5_fu_433_p1;
    select_ln49_6_fu_475_p3 <= 
        xor_ln49_6_fu_469_p2 when (trunc_ln49_5_fu_451_p1(0) = '1') else 
        zext_ln49_6_fu_465_p1;
    select_ln49_7_fu_507_p3 <= 
        xor_ln49_7_fu_501_p2 when (trunc_ln49_6_fu_483_p1(0) = '1') else 
        zext_ln49_7_fu_497_p1;
    select_ln49_fu_285_p3 <= 
        xor_ln49_fu_279_p2 when (xor_ln46_1_fu_259_p2(0) = '1') else 
        zext_ln49_fu_275_p1;
    tmp_11_fu_585_p5 <= (trunc_ln59_fu_575_p1 xor ap_const_lv2_3);
    trunc_ln46_1_fu_249_p1 <= ap_phi_mux_R_0_phi_fu_160_p4(1 - 1 downto 0);
    trunc_ln46_fu_245_p1 <= e_dout(1 - 1 downto 0);
    trunc_ln49_1_fu_325_p1 <= select_ln49_1_fu_317_p3(1 - 1 downto 0);
    trunc_ln49_2_fu_367_p1 <= select_ln49_2_reg_667(1 - 1 downto 0);
    trunc_ln49_3_fu_387_p1 <= select_ln49_3_fu_379_p3(1 - 1 downto 0);
    trunc_ln49_4_fu_419_p1 <= select_ln49_4_fu_411_p3(1 - 1 downto 0);
    trunc_ln49_5_fu_451_p1 <= select_ln49_5_fu_443_p3(1 - 1 downto 0);
    trunc_ln49_6_fu_483_p1 <= select_ln49_6_fu_475_p3(1 - 1 downto 0);
    trunc_ln49_fu_293_p1 <= select_ln49_fu_285_p3(1 - 1 downto 0);
    trunc_ln55_fu_527_p1 <= i1_0_reg_180(2 - 1 downto 0);
    trunc_ln59_1_fu_599_p1 <= crc_0_reg_191(24 - 1 downto 0);
    trunc_ln59_fu_575_p1 <= i2_0_reg_202(2 - 1 downto 0);
    xor_ln46_1_fu_259_p2 <= (trunc_ln46_fu_245_p1 xor trunc_ln46_1_fu_249_p1);
    xor_ln49_1_fu_311_p2 <= (zext_ln49_1_fu_307_p1 xor ap_const_lv32_82F63B78);
    xor_ln49_2_fu_343_p2 <= (zext_ln49_2_fu_339_p1 xor ap_const_lv32_82F63B78);
    xor_ln49_3_fu_373_p2 <= (zext_ln49_3_fu_370_p1 xor ap_const_lv32_82F63B78);
    xor_ln49_4_fu_405_p2 <= (zext_ln49_4_fu_401_p1 xor ap_const_lv32_82F63B78);
    xor_ln49_5_fu_437_p2 <= (zext_ln49_5_fu_433_p1 xor ap_const_lv32_82F63B78);
    xor_ln49_6_fu_469_p2 <= (zext_ln49_6_fu_465_p1 xor ap_const_lv32_82F63B78);
    xor_ln49_7_fu_501_p2 <= (zext_ln49_7_fu_497_p1 xor ap_const_lv32_82F63B78);
    xor_ln49_fu_279_p2 <= (zext_ln49_fu_275_p1 xor ap_const_lv32_82F63B78);
    zext_ln45_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_168),64));
    zext_ln46_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e_dout),32));
    zext_ln49_1_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln49_1_fu_297_p4),32));
    zext_ln49_2_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln49_2_fu_329_p4),32));
    zext_ln49_3_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln49_3_reg_672),32));
    zext_ln49_4_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln49_4_fu_391_p4),32));
    zext_ln49_5_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln49_5_fu_423_p4),32));
    zext_ln49_6_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln49_6_fu_455_p4),32));
    zext_ln49_7_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln49_7_fu_487_p4),32));
    zext_ln49_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_265_p4),32));
    zext_ln70_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_213),64));
end behav;
