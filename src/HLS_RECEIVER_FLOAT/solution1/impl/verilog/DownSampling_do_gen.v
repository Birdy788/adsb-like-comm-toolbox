// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DownSampling_do_gen (
        ap_clk,
        ap_rst,
        e_dout,
        e_empty_n,
        e_read,
        s_din,
        s_full_n,
        s_write
);

parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input  [7:0] e_dout;
input   e_empty_n;
output   e_read;
output  [7:0] s_din;
input   s_full_n;
output   s_write;

reg e_read;
reg s_write;

reg    e_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    s_blk_n;
wire    ap_CS_fsm_state4;
reg   [7:0] val_V_reg_92;
reg   [7:0] trunc_ln_reg_97;
wire   [8:0] zext_ln40_fu_72_p1;
wire   [8:0] zext_ln38_fu_69_p1;
wire   [8:0] add_ln40_fu_76_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd2;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (e_empty_n == 1'b1))) begin
        trunc_ln_reg_97 <= {{add_ln40_fu_76_p2[8:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (e_empty_n == 1'b1))) begin
        val_V_reg_92 <= e_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        e_blk_n = e_empty_n;
    end else begin
        e_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (e_empty_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (e_empty_n == 1'b1)))) begin
        e_read = 1'b1;
    end else begin
        e_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        s_blk_n = s_full_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (s_full_n == 1'b1))) begin
        s_write = 1'b1;
    end else begin
        s_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (e_empty_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (e_empty_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (s_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln40_fu_76_p2 = (zext_ln40_fu_72_p1 + zext_ln38_fu_69_p1);

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign s_din = trunc_ln_reg_97;

assign zext_ln38_fu_69_p1 = val_V_reg_92;

assign zext_ln40_fu_72_p1 = e_dout;

endmodule //DownSampling_do_gen
