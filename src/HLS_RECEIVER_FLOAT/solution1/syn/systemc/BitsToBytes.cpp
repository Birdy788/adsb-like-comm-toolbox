// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "BitsToBytes.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic BitsToBytes::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic BitsToBytes::ap_const_logic_0 = sc_dt::Log_0;
const bool BitsToBytes::ap_const_boolean_1 = true;

BitsToBytes::BitsToBytes(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_BitsToBytes_do_gen_fu_58 = new BitsToBytes_do_gen("grp_BitsToBytes_do_gen_fu_58");
    grp_BitsToBytes_do_gen_fu_58->ap_clk(clock);
    grp_BitsToBytes_do_gen_fu_58->ap_rst(reset);
    grp_BitsToBytes_do_gen_fu_58->e_dout(e_dout);
    grp_BitsToBytes_do_gen_fu_58->e_empty_n(e_empty_n);
    grp_BitsToBytes_do_gen_fu_58->e_read(grp_BitsToBytes_do_gen_fu_58_e_read);
    grp_BitsToBytes_do_gen_fu_58->s_din(grp_BitsToBytes_do_gen_fu_58_s_din);
    grp_BitsToBytes_do_gen_fu_58->s_full_n(s_full_n);
    grp_BitsToBytes_do_gen_fu_58->s_write(grp_BitsToBytes_do_gen_fu_58_s_write);

    SC_METHOD(thread_e_read);
    sensitive << ( grp_BitsToBytes_do_gen_fu_58_e_read );

    SC_METHOD(thread_s_din);
    sensitive << ( grp_BitsToBytes_do_gen_fu_58_s_din );
    sensitive << ( grp_BitsToBytes_do_gen_fu_58_s_write );

    SC_METHOD(thread_s_write);
    sensitive << ( grp_BitsToBytes_do_gen_fu_58_s_write );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "BitsToBytes_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, clock, "(port)clock");
    sc_trace(mVcdFile, reset, "(port)reset");
    sc_trace(mVcdFile, e_dout, "(port)e_dout");
    sc_trace(mVcdFile, e_empty_n, "(port)e_empty_n");
    sc_trace(mVcdFile, e_read, "(port)e_read");
    sc_trace(mVcdFile, s_din, "(port)s_din");
    sc_trace(mVcdFile, s_full_n, "(port)s_full_n");
    sc_trace(mVcdFile, s_write, "(port)s_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, grp_BitsToBytes_do_gen_fu_58_e_read, "grp_BitsToBytes_do_gen_fu_58_e_read");
    sc_trace(mVcdFile, grp_BitsToBytes_do_gen_fu_58_s_din, "grp_BitsToBytes_do_gen_fu_58_s_din");
    sc_trace(mVcdFile, grp_BitsToBytes_do_gen_fu_58_s_write, "grp_BitsToBytes_do_gen_fu_58_s_write");
#endif

    }
}

BitsToBytes::~BitsToBytes() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_BitsToBytes_do_gen_fu_58;
}

void BitsToBytes::thread_e_read() {
    e_read = grp_BitsToBytes_do_gen_fu_58_e_read.read();
}

void BitsToBytes::thread_s_din() {
    s_din = grp_BitsToBytes_do_gen_fu_58_s_din.read();
}

void BitsToBytes::thread_s_write() {
    s_write = grp_BitsToBytes_do_gen_fu_58_s_write.read();
}

}

