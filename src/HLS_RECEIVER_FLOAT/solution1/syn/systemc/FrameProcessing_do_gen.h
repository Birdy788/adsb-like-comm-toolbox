// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _FrameProcessing_do_gen_HH_
#define _FrameProcessing_do_gen_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct FrameProcessing_do_gen : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<8> > e_dout;
    sc_in< sc_logic > e_empty_n;
    sc_out< sc_logic > e_read;
    sc_out< sc_lv<32> > addr_din;
    sc_in< sc_logic > addr_full_n;
    sc_out< sc_logic > addr_write;
    sc_out< sc_lv<24> > rgbv_din;
    sc_in< sc_logic > rgbv_full_n;
    sc_out< sc_logic > rgbv_write;


    // Module declarations
    FrameProcessing_do_gen(sc_module_name name);
    SC_HAS_PROCESS(FrameProcessing_do_gen);

    ~FrameProcessing_do_gen();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > e_blk_n;
    sc_signal< sc_lv<12> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<1> > icmp_ln51_reg_376;
    sc_signal< sc_lv<1> > icmp_ln57_fu_328_p2;
    sc_signal< sc_lv<1> > icmp_ln60_reg_380;
    sc_signal< sc_lv<1> > icmp_ln70_fu_316_p2;
    sc_signal< sc_lv<1> > icmp_ln96_reg_384;
    sc_signal< sc_lv<1> > icmp_ln107_fu_305_p2;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<1> > icmp_ln124_fu_285_p2;
    sc_signal< sc_logic > addr_blk_n;
    sc_signal< sc_logic > rgbv_blk_n;
    sc_signal< sc_lv<8> > reg_164;
    sc_signal< bool > ap_predicate_op70_read_state10;
    sc_signal< bool > ap_predicate_op79_read_state10;
    sc_signal< bool > ap_predicate_op88_read_state10;
    sc_signal< bool > ap_predicate_op97_read_state10;
    sc_signal< bool > ap_block_state10;
    sc_signal< sc_lv<8> > reg_168;
    sc_signal< sc_lv<8> > val_V_5_reg_351;
    sc_signal< sc_lv<8> > val_V_6_reg_356;
    sc_signal< sc_lv<8> > val_V_7_reg_361;
    sc_signal< sc_lv<8> > val_V_8_reg_369;
    sc_signal< sc_lv<1> > icmp_ln51_fu_186_p2;
    sc_signal< sc_lv<1> > icmp_ln60_fu_192_p2;
    sc_signal< sc_lv<1> > icmp_ln96_fu_198_p2;
    sc_signal< sc_lv<26> > curr_off_fu_238_p2;
    sc_signal< sc_lv<16> > add_ln107_2_fu_279_p2;
    sc_signal< sc_lv<16> > add_ln107_2_reg_393;
    sc_signal< sc_lv<7> > i_4_fu_291_p2;
    sc_signal< sc_lv<32> > v_assign_cast_fu_297_p1;
    sc_signal< sc_lv<32> > v_assign_cast_reg_406;
    sc_signal< sc_lv<26> > curr_off_1_fu_310_p2;
    sc_signal< sc_lv<26> > curr_off_1_reg_414;
    sc_signal< sc_lv<6> > i_3_fu_322_p2;
    sc_signal< sc_lv<6> > i_fu_334_p2;
    sc_signal< sc_lv<7> > i3_0_reg_122;
    sc_signal< sc_lv<26> > v_assign_reg_133;
    sc_signal< bool > ap_block_state12;
    sc_signal< sc_lv<6> > i1_0_reg_142;
    sc_signal< sc_lv<6> > i_0_reg_153;
    sc_signal< sc_lv<16> > type_fu_172_p3;
    sc_signal< sc_lv<16> > mot1_fu_180_p3;
    sc_signal< sc_lv<25> > shl_ln_fu_208_p4;
    sc_signal< sc_lv<23> > shl_ln103_1_fu_220_p4;
    sc_signal< sc_lv<26> > zext_ln103_fu_204_p1;
    sc_signal< sc_lv<26> > zext_ln103_1_fu_216_p1;
    sc_signal< sc_lv<26> > zext_ln103_2_fu_228_p1;
    sc_signal< sc_lv<26> > add_ln103_fu_232_p2;
    sc_signal< sc_lv<7> > trunc_ln107_fu_250_p1;
    sc_signal< sc_lv<1> > trunc_ln107_1_fu_261_p1;
    sc_signal< sc_lv<16> > p_shl2_fu_264_p4;
    sc_signal< sc_lv<16> > p_shl_fu_253_p3;
    sc_signal< sc_lv<16> > add_ln107_fu_244_p2;
    sc_signal< sc_lv<16> > add_ln107_1_fu_273_p2;
    sc_signal< sc_lv<16> > trunc_ln107_2_fu_301_p1;
    sc_signal< sc_lv<12> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<12> ap_ST_fsm_state2;
    static const sc_lv<12> ap_ST_fsm_state3;
    static const sc_lv<12> ap_ST_fsm_state4;
    static const sc_lv<12> ap_ST_fsm_state5;
    static const sc_lv<12> ap_ST_fsm_state6;
    static const sc_lv<12> ap_ST_fsm_state7;
    static const sc_lv<12> ap_ST_fsm_state8;
    static const sc_lv<12> ap_ST_fsm_state9;
    static const sc_lv<12> ap_ST_fsm_state10;
    static const sc_lv<12> ap_ST_fsm_state11;
    static const sc_lv<12> ap_ST_fsm_state12;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<16> ap_const_lv16_22;
    static const sc_lv<16> ap_const_lv16_33;
    static const sc_lv<16> ap_const_lv16_11;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<16> ap_const_lv16_14;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<26> ap_const_lv26_1;
    static const sc_lv<6> ap_const_lv6_3C;
    static const sc_lv<6> ap_const_lv6_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln103_fu_232_p2();
    void thread_add_ln107_1_fu_273_p2();
    void thread_add_ln107_2_fu_279_p2();
    void thread_add_ln107_fu_244_p2();
    void thread_addr_blk_n();
    void thread_addr_din();
    void thread_addr_write();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state10();
    void thread_ap_block_state12();
    void thread_ap_predicate_op70_read_state10();
    void thread_ap_predicate_op79_read_state10();
    void thread_ap_predicate_op88_read_state10();
    void thread_ap_predicate_op97_read_state10();
    void thread_curr_off_1_fu_310_p2();
    void thread_curr_off_fu_238_p2();
    void thread_e_blk_n();
    void thread_e_read();
    void thread_i_3_fu_322_p2();
    void thread_i_4_fu_291_p2();
    void thread_i_fu_334_p2();
    void thread_icmp_ln107_fu_305_p2();
    void thread_icmp_ln124_fu_285_p2();
    void thread_icmp_ln51_fu_186_p2();
    void thread_icmp_ln57_fu_328_p2();
    void thread_icmp_ln60_fu_192_p2();
    void thread_icmp_ln70_fu_316_p2();
    void thread_icmp_ln96_fu_198_p2();
    void thread_mot1_fu_180_p3();
    void thread_p_shl2_fu_264_p4();
    void thread_p_shl_fu_253_p3();
    void thread_rgbv_blk_n();
    void thread_rgbv_din();
    void thread_rgbv_write();
    void thread_shl_ln103_1_fu_220_p4();
    void thread_shl_ln_fu_208_p4();
    void thread_trunc_ln107_1_fu_261_p1();
    void thread_trunc_ln107_2_fu_301_p1();
    void thread_trunc_ln107_fu_250_p1();
    void thread_type_fu_172_p3();
    void thread_v_assign_cast_fu_297_p1();
    void thread_zext_ln103_1_fu_216_p1();
    void thread_zext_ln103_2_fu_228_p1();
    void thread_zext_ln103_fu_204_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
