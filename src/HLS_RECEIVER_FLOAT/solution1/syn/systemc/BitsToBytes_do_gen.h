// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _BitsToBytes_do_gen_HH_
#define _BitsToBytes_do_gen_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct BitsToBytes_do_gen : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<1> > e_dout;
    sc_in< sc_logic > e_empty_n;
    sc_out< sc_logic > e_read;
    sc_out< sc_lv<8> > s_din;
    sc_in< sc_logic > s_full_n;
    sc_out< sc_logic > s_write;


    // Module declarations
    BitsToBytes_do_gen(sc_module_name name);
    SC_HAS_PROCESS(BitsToBytes_do_gen);

    ~BitsToBytes_do_gen();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > e_blk_n;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln37_fu_104_p2;
    sc_signal< sc_logic > s_blk_n;
    sc_signal< sc_lv<4> > q_fu_110_p2;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<8> > v_fu_120_p3;
    sc_signal< sc_lv<8> > v_assign_reg_81;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > q_0_reg_93;
    sc_signal< sc_lv<7> > trunc_ln40_fu_116_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state3();
    void thread_e_blk_n();
    void thread_e_read();
    void thread_icmp_ln37_fu_104_p2();
    void thread_q_fu_110_p2();
    void thread_s_blk_n();
    void thread_s_din();
    void thread_s_write();
    void thread_trunc_ln40_fu_116_p1();
    void thread_v_fu_120_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
