// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BitsToBytes_do_gen (
        ap_clk,
        ap_rst,
        e_dout,
        e_empty_n,
        e_read,
        s_din,
        s_full_n,
        s_write
);

parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input  [0:0] e_dout;
input   e_empty_n;
output   e_read;
output  [7:0] s_din;
input   s_full_n;
output   s_write;

reg e_read;
reg s_write;

reg    e_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln37_fu_104_p2;
reg    s_blk_n;
wire   [3:0] q_fu_110_p2;
reg    ap_block_state3;
wire   [7:0] v_fu_120_p3;
reg   [7:0] v_assign_reg_81;
wire    ap_CS_fsm_state2;
reg   [3:0] q_0_reg_93;
wire   [6:0] trunc_ln40_fu_116_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd2;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((s_full_n == 1'b0) & (icmp_ln37_fu_104_p2 == 1'd1)) | ((e_empty_n == 1'b0) & (icmp_ln37_fu_104_p2 == 1'd0))) & (icmp_ln37_fu_104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        q_0_reg_93 <= q_fu_110_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        q_0_reg_93 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((s_full_n == 1'b0) & (icmp_ln37_fu_104_p2 == 1'd1)) | ((e_empty_n == 1'b0) & (icmp_ln37_fu_104_p2 == 1'd0))) & (icmp_ln37_fu_104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        v_assign_reg_81 <= v_fu_120_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        v_assign_reg_81 <= 8'd0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        e_blk_n = e_empty_n;
    end else begin
        e_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((s_full_n == 1'b0) & (icmp_ln37_fu_104_p2 == 1'd1)) | ((e_empty_n == 1'b0) & (icmp_ln37_fu_104_p2 == 1'd0))) & (icmp_ln37_fu_104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        e_read = 1'b1;
    end else begin
        e_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        s_blk_n = s_full_n;
    end else begin
        s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((s_full_n == 1'b0) & (icmp_ln37_fu_104_p2 == 1'd1)) | ((e_empty_n == 1'b0) & (icmp_ln37_fu_104_p2 == 1'd0))) & (icmp_ln37_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        s_write = 1'b1;
    end else begin
        s_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~(((s_full_n == 1'b0) & (icmp_ln37_fu_104_p2 == 1'd1)) | ((e_empty_n == 1'b0) & (icmp_ln37_fu_104_p2 == 1'd0))) & (icmp_ln37_fu_104_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((s_full_n == 1'b0) & (icmp_ln37_fu_104_p2 == 1'd1)) | ((e_empty_n == 1'b0) & (icmp_ln37_fu_104_p2 == 1'd0))) & (icmp_ln37_fu_104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state3 = (((s_full_n == 1'b0) & (icmp_ln37_fu_104_p2 == 1'd1)) | ((e_empty_n == 1'b0) & (icmp_ln37_fu_104_p2 == 1'd0)));
end

assign icmp_ln37_fu_104_p2 = ((q_0_reg_93 == 4'd8) ? 1'b1 : 1'b0);

assign q_fu_110_p2 = (q_0_reg_93 + 4'd1);

assign s_din = v_assign_reg_81;

assign trunc_ln40_fu_116_p1 = v_assign_reg_81[6:0];

assign v_fu_120_p3 = {{trunc_ln40_fu_116_p1}, {e_dout}};

endmodule //BitsToBytes_do_gen
