// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DOUBLEUR_U_do_gen (
        ap_clk,
        ap_rst,
        e_dout,
        e_empty_n,
        e_read,
        s1_din,
        s1_full_n,
        s1_write,
        s2_din,
        s2_full_n,
        s2_write
);

parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input  [7:0] e_dout;
input   e_empty_n;
output   e_read;
output  [7:0] s1_din;
input   s1_full_n;
output   s1_write;
output  [7:0] s2_din;
input   s2_full_n;
output   s2_write;

reg e_read;
reg s1_write;
reg s2_write;

reg    e_blk_n;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    s1_blk_n;
reg    s2_blk_n;
reg    ap_block_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd2;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        e_blk_n = e_empty_n;
    end else begin
        e_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((e_empty_n == 1'b0) | (s2_full_n == 1'b0) | (s1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        e_read = 1'b1;
    end else begin
        e_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        s1_blk_n = s1_full_n;
    end else begin
        s1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((e_empty_n == 1'b0) | (s2_full_n == 1'b0) | (s1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        s1_write = 1'b1;
    end else begin
        s1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        s2_blk_n = s2_full_n;
    end else begin
        s2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((e_empty_n == 1'b0) | (s2_full_n == 1'b0) | (s1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        s2_write = 1'b1;
    end else begin
        s2_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2 = ((e_empty_n == 1'b0) | (s2_full_n == 1'b0) | (s1_full_n == 1'b0));
end

assign s1_din = e_dout;

assign s2_din = e_dout;

endmodule //DOUBLEUR_U_do_gen
