// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ModuleCompute_do_gen_HH_
#define _ModuleCompute_do_gen_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ModuleCompute_macg8j.h"

namespace ap_rtl {

struct ModuleCompute_do_gen : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<8> > e_dout;
    sc_in< sc_logic > e_empty_n;
    sc_out< sc_logic > e_read;
    sc_out< sc_lv<8> > s_din;
    sc_in< sc_logic > s_full_n;
    sc_out< sc_logic > s_write;


    // Module declarations
    ModuleCompute_do_gen(sc_module_name name);
    SC_HAS_PROCESS(ModuleCompute_do_gen);

    ~ModuleCompute_do_gen();

    sc_trace_file* mVcdFile;

    ModuleCompute_macg8j<1,1,8,8,16,16>* ModuleCompute_macg8j_U66;
    sc_signal< sc_logic > e_blk_n;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > s_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln70_fu_130_p2;
    sc_signal< sc_lv<8> > val_V_reg_191;
    sc_signal< sc_lv<8> > val_V_3_reg_196;
    sc_signal< sc_lv<16> > grp_fu_183_p3;
    sc_signal< sc_lv<16> > add_ln99_reg_201;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > i_fu_136_p2;
    sc_signal< sc_lv<4> > i_reg_209;
    sc_signal< bool > ap_block_state5;
    sc_signal< sc_lv<8> > res_fu_142_p2;
    sc_signal< sc_lv<8> > res_reg_214;
    sc_signal< sc_lv<1> > icmp_ln74_fu_158_p2;
    sc_signal< sc_lv<1> > icmp_ln74_reg_219;
    sc_signal< sc_lv<8> > add_1_fu_173_p1;
    sc_signal< sc_lv<8> > add_1_reg_224;
    sc_signal< sc_lv<8> > select_ln74_fu_177_p3;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<8> > rc_V_reg_83;
    sc_signal< sc_lv<8> > add_0_i_reg_96;
    sc_signal< sc_lv<4> > i_0_i_reg_107;
    sc_signal< sc_lv<8> > ret_V_1_fu_124_p0;
    sc_signal< sc_lv<16> > lhs_V_1_fu_121_p1;
    sc_signal< sc_lv<8> > ret_V_1_fu_124_p1;
    sc_signal< sc_lv<8> > g2_fu_152_p0;
    sc_signal< sc_lv<16> > zext_ln73_fu_148_p1;
    sc_signal< sc_lv<8> > g2_fu_152_p1;
    sc_signal< sc_lv<16> > g2_fu_152_p2;
    sc_signal< sc_lv<7> > add_fu_163_p4;
    sc_signal< sc_lv<8> > grp_fu_183_p0;
    sc_signal< sc_lv<16> > lhs_V_fu_118_p1;
    sc_signal< sc_lv<8> > grp_fu_183_p1;
    sc_signal< sc_lv<16> > grp_fu_183_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_1_fu_173_p1();
    void thread_add_fu_163_p4();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_state5();
    void thread_e_blk_n();
    void thread_e_read();
    void thread_g2_fu_152_p0();
    void thread_g2_fu_152_p1();
    void thread_g2_fu_152_p2();
    void thread_grp_fu_183_p0();
    void thread_grp_fu_183_p1();
    void thread_grp_fu_183_p2();
    void thread_i_fu_136_p2();
    void thread_icmp_ln70_fu_130_p2();
    void thread_icmp_ln74_fu_158_p2();
    void thread_lhs_V_1_fu_121_p1();
    void thread_lhs_V_fu_118_p1();
    void thread_res_fu_142_p2();
    void thread_ret_V_1_fu_124_p0();
    void thread_ret_V_1_fu_124_p1();
    void thread_s_blk_n();
    void thread_s_din();
    void thread_s_write();
    void thread_select_ln74_fu_177_p3();
    void thread_zext_ln73_fu_148_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
