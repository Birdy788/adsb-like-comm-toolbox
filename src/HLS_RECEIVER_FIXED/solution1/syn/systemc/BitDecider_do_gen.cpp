// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "BitDecider_do_gen.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic BitDecider_do_gen::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic BitDecider_do_gen::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> BitDecider_do_gen::ap_ST_fsm_state2 = "10";
const sc_lv<4> BitDecider_do_gen::ap_ST_fsm_state3 = "100";
const sc_lv<4> BitDecider_do_gen::ap_ST_fsm_state4 = "1000";
const sc_lv<32> BitDecider_do_gen::ap_const_lv32_1 = "1";
const sc_lv<32> BitDecider_do_gen::ap_const_lv32_2 = "10";
const sc_lv<32> BitDecider_do_gen::ap_const_lv32_3 = "11";
const bool BitDecider_do_gen::ap_const_boolean_1 = true;

BitDecider_do_gen::BitDecider_do_gen(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_e_blk_n);
    sensitive << ( e_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_e_read);
    sensitive << ( e_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_icmp_ln37_fu_65_p2);
    sensitive << ( e_dout );
    sensitive << ( e_empty_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( val_V_reg_70 );

    SC_METHOD(thread_s_blk_n);
    sensitive << ( s_full_n );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_s_din);
    sensitive << ( s_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln37_reg_75 );

    SC_METHOD(thread_s_write);
    sensitive << ( s_full_n );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( e_empty_n );
    sensitive << ( s_full_n );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    ap_CS_fsm = "0010";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "BitDecider_do_gen_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, e_dout, "(port)e_dout");
    sc_trace(mVcdFile, e_empty_n, "(port)e_empty_n");
    sc_trace(mVcdFile, e_read, "(port)e_read");
    sc_trace(mVcdFile, s_din, "(port)s_din");
    sc_trace(mVcdFile, s_full_n, "(port)s_full_n");
    sc_trace(mVcdFile, s_write, "(port)s_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, e_blk_n, "e_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, s_blk_n, "s_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, val_V_reg_70, "val_V_reg_70");
    sc_trace(mVcdFile, icmp_ln37_fu_65_p2, "icmp_ln37_fu_65_p2");
    sc_trace(mVcdFile, icmp_ln37_reg_75, "icmp_ln37_reg_75");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

BitDecider_do_gen::~BitDecider_do_gen() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void BitDecider_do_gen::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state2;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(e_empty_n.read(), ap_const_logic_1))) {
        icmp_ln37_reg_75 = icmp_ln37_fu_65_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(e_empty_n.read(), ap_const_logic_1))) {
        val_V_reg_70 = e_dout.read();
    }
}

void BitDecider_do_gen::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void BitDecider_do_gen::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void BitDecider_do_gen::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void BitDecider_do_gen::thread_e_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        e_blk_n = e_empty_n.read();
    } else {
        e_blk_n = ap_const_logic_1;
    }
}

void BitDecider_do_gen::thread_e_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(e_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(e_empty_n.read(), ap_const_logic_1)))) {
        e_read = ap_const_logic_1;
    } else {
        e_read = ap_const_logic_0;
    }
}

void BitDecider_do_gen::thread_icmp_ln37_fu_65_p2() {
    icmp_ln37_fu_65_p2 = (!val_V_reg_70.read().is_01() || !e_dout.read().is_01())? sc_lv<1>(): (sc_biguint<8>(val_V_reg_70.read()) > sc_biguint<8>(e_dout.read()));
}

void BitDecider_do_gen::thread_s_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        s_blk_n = s_full_n.read();
    } else {
        s_blk_n = ap_const_logic_1;
    }
}

void BitDecider_do_gen::thread_s_din() {
    s_din = icmp_ln37_reg_75.read();
}

void BitDecider_do_gen::thread_s_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(s_full_n.read(), ap_const_logic_1))) {
        s_write = ap_const_logic_1;
    } else {
        s_write = ap_const_logic_0;
    }
}

void BitDecider_do_gen::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(e_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(e_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(s_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

