// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Detecteur1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Detecteur1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Detecteur1::ap_const_logic_0 = sc_dt::Log_0;

Detecteur1::Detecteur1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_Seuil_calc1_fu_100 = new Seuil_calc1("grp_Seuil_calc1_fu_100");
    grp_Seuil_calc1_fu_100->e_dout(dbl2scalc_1_dout);
    grp_Seuil_calc1_fu_100->e_empty_n(dbl2scalc_1_empty_n);
    grp_Seuil_calc1_fu_100->e_read(grp_Seuil_calc1_fu_100_e_read);
    grp_Seuil_calc1_fu_100->detect_din(grp_Seuil_calc1_fu_100_detect_din);
    grp_Seuil_calc1_fu_100->detect_full_n(detect_1_full_n);
    grp_Seuil_calc1_fu_100->detect_write(grp_Seuil_calc1_fu_100_detect_write);
    grp_Seuil_calc1_fu_100->clock(clock);
    grp_Seuil_calc1_fu_100->reset(reset);
    grp_trames_separ1_fu_114 = new trames_separ1("grp_trames_separ1_fu_114");
    grp_trames_separ1_fu_114->e_dout(dbl2tsep_1_dout);
    grp_trames_separ1_fu_114->e_empty_n(dbl2tsep_1_empty_n);
    grp_trames_separ1_fu_114->e_read(grp_trames_separ1_fu_114_e_read);
    grp_trames_separ1_fu_114->detect_dout(grp_trames_separ1_fu_114_detect_dout);
    grp_trames_separ1_fu_114->detect_empty_n(detect_1_empty_n);
    grp_trames_separ1_fu_114->detect_read(grp_trames_separ1_fu_114_detect_read);
    grp_trames_separ1_fu_114->s_din(grp_trames_separ1_fu_114_s_din);
    grp_trames_separ1_fu_114->s_full_n(s_full_n);
    grp_trames_separ1_fu_114->s_write(grp_trames_separ1_fu_114_s_write);
    grp_trames_separ1_fu_114->clock(clock);
    grp_trames_separ1_fu_114->reset(reset);
    grp_DOUBLEUR_U_fu_130 = new DOUBLEUR_U("grp_DOUBLEUR_U_fu_130");
    grp_DOUBLEUR_U_fu_130->e_dout(e_dout);
    grp_DOUBLEUR_U_fu_130->e_empty_n(e_empty_n);
    grp_DOUBLEUR_U_fu_130->e_read(grp_DOUBLEUR_U_fu_130_e_read);
    grp_DOUBLEUR_U_fu_130->s1_din(grp_DOUBLEUR_U_fu_130_s1_din);
    grp_DOUBLEUR_U_fu_130->s1_full_n(dbl2scalc_1_full_n);
    grp_DOUBLEUR_U_fu_130->s1_write(grp_DOUBLEUR_U_fu_130_s1_write);
    grp_DOUBLEUR_U_fu_130->s2_din(grp_DOUBLEUR_U_fu_130_s2_din);
    grp_DOUBLEUR_U_fu_130->s2_full_n(dbl2tsep_1_full_n);
    grp_DOUBLEUR_U_fu_130->s2_write(grp_DOUBLEUR_U_fu_130_s2_write);
    grp_DOUBLEUR_U_fu_130->clock(clock);
    grp_DOUBLEUR_U_fu_130->reset(reset);
    dbl2scalc_1_fifo_U = new fifo_w8_d1024_A("dbl2scalc_1_fifo_U");
    dbl2scalc_1_fifo_U->clk(clock);
    dbl2scalc_1_fifo_U->reset(reset);
    dbl2scalc_1_fifo_U->if_read_ce(ap_var_for_const0);
    dbl2scalc_1_fifo_U->if_write_ce(ap_var_for_const0);
    dbl2scalc_1_fifo_U->if_din(grp_DOUBLEUR_U_fu_130_s1_din);
    dbl2scalc_1_fifo_U->if_full_n(dbl2scalc_1_full_n);
    dbl2scalc_1_fifo_U->if_write(grp_DOUBLEUR_U_fu_130_s1_write);
    dbl2scalc_1_fifo_U->if_dout(dbl2scalc_1_dout);
    dbl2scalc_1_fifo_U->if_empty_n(dbl2scalc_1_empty_n);
    dbl2scalc_1_fifo_U->if_read(grp_Seuil_calc1_fu_100_e_read);
    dbl2tsep_1_fifo_U = new fifo_w8_d1024_A("dbl2tsep_1_fifo_U");
    dbl2tsep_1_fifo_U->clk(clock);
    dbl2tsep_1_fifo_U->reset(reset);
    dbl2tsep_1_fifo_U->if_read_ce(ap_var_for_const0);
    dbl2tsep_1_fifo_U->if_write_ce(ap_var_for_const0);
    dbl2tsep_1_fifo_U->if_din(grp_DOUBLEUR_U_fu_130_s2_din);
    dbl2tsep_1_fifo_U->if_full_n(dbl2tsep_1_full_n);
    dbl2tsep_1_fifo_U->if_write(grp_DOUBLEUR_U_fu_130_s2_write);
    dbl2tsep_1_fifo_U->if_dout(dbl2tsep_1_dout);
    dbl2tsep_1_fifo_U->if_empty_n(dbl2tsep_1_empty_n);
    dbl2tsep_1_fifo_U->if_read(grp_trames_separ1_fu_114_e_read);
    detect_1_fifo_U = new fifo_w1_d1024_A("detect_1_fifo_U");
    detect_1_fifo_U->clk(clock);
    detect_1_fifo_U->reset(reset);
    detect_1_fifo_U->if_read_ce(ap_var_for_const0);
    detect_1_fifo_U->if_write_ce(ap_var_for_const0);
    detect_1_fifo_U->if_din(detect_1_din);
    detect_1_fifo_U->if_full_n(detect_1_full_n);
    detect_1_fifo_U->if_write(grp_Seuil_calc1_fu_100_detect_write);
    detect_1_fifo_U->if_dout(detect_1_dout);
    detect_1_fifo_U->if_empty_n(detect_1_empty_n);
    detect_1_fifo_U->if_read(grp_trames_separ1_fu_114_detect_read);

    SC_METHOD(thread_detect_1_din);
    sensitive << ( grp_Seuil_calc1_fu_100_detect_din );

    SC_METHOD(thread_e_read);
    sensitive << ( grp_DOUBLEUR_U_fu_130_e_read );

    SC_METHOD(thread_grp_trames_separ1_fu_114_detect_dout);
    sensitive << ( detect_1_dout );

    SC_METHOD(thread_s_din);
    sensitive << ( grp_trames_separ1_fu_114_s_din );

    SC_METHOD(thread_s_write);
    sensitive << ( grp_trames_separ1_fu_114_s_write );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Detecteur1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, clock, "(port)clock");
    sc_trace(mVcdFile, reset, "(port)reset");
    sc_trace(mVcdFile, e_dout, "(port)e_dout");
    sc_trace(mVcdFile, e_empty_n, "(port)e_empty_n");
    sc_trace(mVcdFile, e_read, "(port)e_read");
    sc_trace(mVcdFile, s_din, "(port)s_din");
    sc_trace(mVcdFile, s_full_n, "(port)s_full_n");
    sc_trace(mVcdFile, s_write, "(port)s_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, grp_Seuil_calc1_fu_100_e_read, "grp_Seuil_calc1_fu_100_e_read");
    sc_trace(mVcdFile, grp_Seuil_calc1_fu_100_detect_din, "grp_Seuil_calc1_fu_100_detect_din");
    sc_trace(mVcdFile, grp_Seuil_calc1_fu_100_detect_write, "grp_Seuil_calc1_fu_100_detect_write");
    sc_trace(mVcdFile, grp_trames_separ1_fu_114_e_read, "grp_trames_separ1_fu_114_e_read");
    sc_trace(mVcdFile, grp_trames_separ1_fu_114_detect_dout, "grp_trames_separ1_fu_114_detect_dout");
    sc_trace(mVcdFile, grp_trames_separ1_fu_114_detect_read, "grp_trames_separ1_fu_114_detect_read");
    sc_trace(mVcdFile, grp_trames_separ1_fu_114_s_din, "grp_trames_separ1_fu_114_s_din");
    sc_trace(mVcdFile, grp_trames_separ1_fu_114_s_write, "grp_trames_separ1_fu_114_s_write");
    sc_trace(mVcdFile, grp_DOUBLEUR_U_fu_130_e_read, "grp_DOUBLEUR_U_fu_130_e_read");
    sc_trace(mVcdFile, grp_DOUBLEUR_U_fu_130_s1_din, "grp_DOUBLEUR_U_fu_130_s1_din");
    sc_trace(mVcdFile, grp_DOUBLEUR_U_fu_130_s1_write, "grp_DOUBLEUR_U_fu_130_s1_write");
    sc_trace(mVcdFile, grp_DOUBLEUR_U_fu_130_s2_din, "grp_DOUBLEUR_U_fu_130_s2_din");
    sc_trace(mVcdFile, grp_DOUBLEUR_U_fu_130_s2_write, "grp_DOUBLEUR_U_fu_130_s2_write");
    sc_trace(mVcdFile, dbl2scalc_1_full_n, "dbl2scalc_1_full_n");
    sc_trace(mVcdFile, dbl2tsep_1_full_n, "dbl2tsep_1_full_n");
    sc_trace(mVcdFile, dbl2scalc_1_dout, "dbl2scalc_1_dout");
    sc_trace(mVcdFile, dbl2scalc_1_empty_n, "dbl2scalc_1_empty_n");
    sc_trace(mVcdFile, detect_1_din, "detect_1_din");
    sc_trace(mVcdFile, detect_1_full_n, "detect_1_full_n");
    sc_trace(mVcdFile, dbl2tsep_1_dout, "dbl2tsep_1_dout");
    sc_trace(mVcdFile, dbl2tsep_1_empty_n, "dbl2tsep_1_empty_n");
    sc_trace(mVcdFile, detect_1_dout, "detect_1_dout");
    sc_trace(mVcdFile, detect_1_empty_n, "detect_1_empty_n");
#endif

    }
}

Detecteur1::~Detecteur1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_Seuil_calc1_fu_100;
    delete grp_trames_separ1_fu_114;
    delete grp_DOUBLEUR_U_fu_130;
    delete dbl2scalc_1_fifo_U;
    delete dbl2tsep_1_fifo_U;
    delete detect_1_fifo_U;
}

void Detecteur1::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Detecteur1::thread_detect_1_din() {
    detect_1_din =  (sc_lv<1>) (grp_Seuil_calc1_fu_100_detect_din.read());
}

void Detecteur1::thread_e_read() {
    e_read = grp_DOUBLEUR_U_fu_130_e_read.read();
}

void Detecteur1::thread_grp_trames_separ1_fu_114_detect_dout() {
    grp_trames_separ1_fu_114_detect_dout =  (sc_logic) (detect_1_dout.read()[0]);
}

void Detecteur1::thread_s_din() {
    s_din = grp_trames_separ1_fu_114_s_din.read();
}

void Detecteur1::thread_s_write() {
    s_write = grp_trames_separ1_fu_114_s_write.read();
}

}

